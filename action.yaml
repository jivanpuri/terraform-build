name: 'Build Terraform'
description: 'Generates a tag for the repo'
inputs:
  branch:  # id of input
    description: 'Name of the master branch'
    required: false
    default: 'master'
  terraform-version:
    description: 'Terraform version'
    required: false
    default: 'v1'
  env:
    description: 'Name of the environment'
    required: false
    default: 'prod'
  region:
    description: 'Name of the region'
    required: false
    default: 'us-central1'

runs:
  using: "composite"

  steps:
    - run: echo Executing against ${{ inputs.branch }} branch.
      shell: bash

    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash          
      
    - name: Version  
      id: version  
      uses: jivanpuri/get-version@v1.3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # check if environment specific file exists
    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "env/${{ inputs.env }}/${{ inputs.region }}/terraform.tfvars"
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Format
      id: fmt
      run: |
        cd src
        terraform fmt -check -recursive
      shell: bash
      continue-on-error: true
      
    - name: Post Format
      if: always() && github.ref != 'refs/heads/${{ inputs.branch }}' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: fmt
        commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
        commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}
        
    - name: Terraform Init
      id: init
      run: |
        cd src
        terraform init
      shell: bash

    - name: Post Init
      if: always() && github.ref != 'refs/heads/${{ inputs.branch }}' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan with env
      id: plan
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        cd src
        terraform plan -input=false -var-file="../env/${{ inputs.env }}/${{ inputs.region }}/terraform.tfvars"
      shell: bash
      
    - name: Post Plan - ${{ matrix['workspace'] }}
      if: always() && github.ref != 'refs/heads/${{ inputs.branch }}' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
